<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<title>Admin</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto|Varela+Round|Open+Sans">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>


<style>
body {
    color: #404E67;
    background: #F5F7FA;
    font-family: 'Open Sans', sans-serif;
}
.table-wrapper {
    width: calc(100%);
    margin: 30px auto;
    background: #fff;
    padding: 20px;	
    box-shadow: 0 1px 1px rgba(0,0,0,.05);
}
.table-title {
    padding-bottom: 10px;
    margin: 0 0 10px;
}
.table-title h2 {
    margin: 6px 0 0;
    font-size: 22px;
}
.table-title .add-new {
    float: right;
    height: 30px;
    font-weight: bold;
    font-size: 12px;
    text-shadow: none;
    min-width: 100px;
    border-radius: 50px;
    line-height: 13px;
}
.table-title .add-new i {
    margin-right: 4px;
}
table.table {
    table-layout: fixed;
}
table.table tr th, table.table tr td {
    border-color: #e9e9e9;
    word-wrap: break-word;
    word-break: break-word;
    white-space: normal;
    overflow: hidden;
    text-overflow: ellipsis;
}
table.table th i {
    font-size: 13px;
    margin: 0 5px;
    cursor: pointer;
}
table.table th:last-child {
    width: 100px;
}
table.table td a {
    cursor: pointer;
    display: inline-block;
    margin: 0 5px;
    min-width: 24px;
}    
table.table td a.add {
    color: #27C46B;
}
table.table td a.edit {
    color: #FFC107;
}
table.table td a.delete {
    color: #E34724;
}
table.table td i {
    font-size: 19px;
}
table.table td a.add i {
    font-size: 24px;
    margin-right: -1px;
    position: relative;
    top: 3px;
}    
table.table .form-control {
    height: 32px;
    line-height: 32px;
    box-shadow: none;
    border-radius: 2px;
}
table.table .form-control.error {
    border-color: #f50000;
}
table.table td .add {
    display: none;
}
.form-container {
    background-color: #534f53c1;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
}

/* Dodati stil za dugme za zatvaranje forme */
.close {
    background-color: #f50000;
    position: absolute;
    top: 10px;
    right: 10px;
    width: 30px; 
    height: 30px; 
    font-size: 24px;
    color: #3a3434;
    cursor: pointer;
    line-height: 30px;
    text-align: center;
}

/* Stil za hover efekat na dugme za zatvaranje */
.close:hover {
    color: black;
}

.dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 120px;
            overflow-y: auto;
            max-height: 100px;
            border: 1px solid #ddd;
            z-index: 1;
        }

        .dropdown-content label {
            display: block;
            padding: 5px 10px;
            cursor: pointer;
        }

        .dropdown-content label:hover {
            background-color: #ddd;
        }

        .show {
            display: block;
        }

        .selected-items {
              width:100px;
            margin-top: 5px;
            padding: 5px;
            border: 1px solid #ccc;
        }

        .selected-items div {
            margin-bottom: 5px;
        }

        .file-drop-area {
  position: relative;
  display: flex;
  align-items: center;
  width: 450px;
  max-width: 100%;
  padding: 25px;
  border: 1px dashed rgba(255, 255, 255, 0.4);
  border-radius: 3px;
  transition: 0.2s;
 
}

.choose-file-button {
  flex-shrink: 0;
  background-color: rgba(255, 255, 255, 0.04);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 3px;
  padding: 8px 15px;
  margin-right: 10px;
  font-size: 12px;
  text-transform: uppercase;
}

.file-message {
  font-size: small;
  font-weight: 300;
  line-height: 1.4;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.file-input {
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;
  cursor: pointer;
  opacity: 0;
  
}

.mt-100{
    margin-top:100px;
}



</style>
<script>
    const categories = JSON.parse('<%- JSON.stringify(categories) %>');
    const ingredients = JSON.parse('<%- JSON.stringify(ingredients) %>');
    const products = JSON.parse('<%- JSON.stringify(products) %>');
    const productIngredients = JSON.parse('<%- JSON.stringify(productIngredients) %>');

    
    
// Funkcija za zatvaranje forme
function closeForm() {
    $(".add-new").removeAttr("disabled");
    $(".form-container").parent().parent().remove();
    $("#add-category-btn").prop("disabled", false);
    $("#add-ingredient-btn").prop("disabled", false);
    $("#delete-ingredient-btn").prop("disabled", false);
    $("#delete-category-btn").prop("disabled", false);
}

$(document).ready(function(){
	$('[data-toggle="tooltip"]').tooltip();
	var actions = $("table td:last-child").html();
	
    //Add new category
    // $("#add-category-btn").click(function() {
    //     $(this).attr("disabled", "disabled");
    //         var categoryForm = '<form id="addCategoryForm">' +
    //             '<div class="form-group">' +
    //                 '<label for="categoryName">Category Name</label>' +
    //                 '<input type="text" class="form-control" id="categoryName" placeholder="Category Name" required>' +
    //             '</div>' +
    //             '<button type="submit" class="btn btn-primary">Submit</button>' +
    //         '</form>';

    //         $("table thead").append('<tr><td colspan="7"><div class="form-container">' + categoryForm + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');

    //         $('#addCategoryForm').submit(function(event) {
    //             event.preventDefault();
    //             // console.log("ZISLO SEMKA")

    //             var categoryData = {
    //                 categoryName: $('#categoryName').val()
    //             };
                
    //             fetch('/createCategory', {
    //                 method: 'POST',
    //                 headers: {
    //                     'Content-Type': 'application/json'
    //                 },
    //                 body: JSON.stringify(categoryData)
    //             })
    //             .then(response => response.json())
    //             .then(data => {
    //                 console.log(data);
    //                 if(data.success){
    //                     location.reload();
    //                 }
                    
    //             })
    //             .catch(error => {
    //                 console.error('Error:', error);
    //             });
    //         });
    //     });

    // Delete category
    // $("#delete-category-btn").click(function() {
    //     $(this).attr("disabled", "disabled");
    //     var deleteCategoryForm = '<form id="deleteCategoryForm">' +
    //         '<div class="form-group">' +
    //             '<label for="categories">Select Categories to Delete</label><br>';

    //     categories.forEach(category => {
    //         deleteCategoryForm += '<input type="checkbox" name="categories" value="' + category.categoryId + '"> ' + category.categoryName + '<br>';
    //     });

    //     deleteCategoryForm += '</div>' +
    //         '<p>If you want to delete the selected categories, check them and click Submit.</p>' +
    //         '<button type="submit" class="btn btn-danger">Submit</button>' +
    //     '</form>';

    //     $("table thead").append('<tr><td colspan="7"><div class="form-container">' + deleteCategoryForm + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');

    //     $('#deleteCategoryForm').submit(function(event) {
    //         event.preventDefault();

    //         var selectedCategories = [];
    //         $('input[name="categories"]:checked').each(function() {
    //             selectedCategories.push($(this).val());
    //         });

    //         fetch('/deleteCategory', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json'
    //             },
    //             body: JSON.stringify({ categories: selectedCategories })
    //         })
    //         .then(response => response.json())
    //         .then(data => {
    //             console.log(data);
    //             if(data.success){
    //                 location.reload();
    //             }
    //         })
    //         .catch(error => {
    //             console.error('Error:', error);
    //         });
    //     });
    // });

    
        //Add new ingredient
    $("#add-ingredient-btn").click(function() {
        $(this).attr("disabled", "disabled");
            var ingredientForm = '<form id="addIngredientForm">' +
                '<div class="form-group">' +
                    '<label for="ingredientName">Ingredient Name</label>' +
                    '<input type="text" class="form-control" id="ingredientName" placeholder="Ingredient Name" required>' +
                '</div>' +
                '<button type="submit" class="btn btn-primary">Submit</button>' +
            '</form>';

            $("table thead").append('<tr><td colspan="7"><div class="form-container">' + ingredientForm + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');

            $('#addIngredientForm').submit(function(event) {
                event.preventDefault();
                // console.log("ZISLO SEMKA")

                var ingredientData = {
                    ingredientName: $('#ingredientName').val()
                };
                console.log(ingredientData)

                fetch('/createIngredient', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(ingredientData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        location.reload();
                    }
                    
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
        });

       // Delete ingredient
$("#delete-ingredient-btn").click(function() {
    $(this).attr("disabled", "disabled");
    var deleteIngredientForm = '<form id="deleteIngredientForm">' +
        '<div class="form-group">' +
            '<label for="ingredients">Select Ingredients to Delete</label><br>';

    ingredients.forEach(ingredient => {
        deleteIngredientForm += '<input type="checkbox" name="ingredients" value="' + ingredient.ingredientId + '"> ' + ingredient.ingredientName + '<br>';
    });

    deleteIngredientForm += '</div>' +
        '<p>If you want to delete the selected ingredients, check them and click Submit.</p>' +
        '<button type="submit" class="btn btn-danger">Submit</button>' +
    '</form>';

    $("table thead").append('<tr><td colspan="7"><div class="form-container">' + deleteIngredientForm + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');

    $('#deleteIngredientForm').submit(function(event) {
        event.preventDefault();

        var selectedIngredients = [];
        $('input[name="ingredients"]:checked').each(function() {
            selectedIngredients.push($(this).val());
        });

        fetch('/deleteIngredient', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ingredients: selectedIngredients })
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            if(data.success){
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });
});



    // Append table with add row form on add new button click
    $("#add-product-btn").click(function(){
        $(this).attr("disabled", "disabled");
        

        if (categories.length > 0) {
            selectedCategoryId = categories[0].categoryId; 
        }else{
            console.log("POSTOJI GRESKA")
        }
        if (ingredients.length > 0) {
            selectedIngredientId = ingredients[0].ingredientId;
        } else {
            console.log("INGREDIENT GRESKA");
        }
        
        var categoriesDropdown = '<div class="form-group">' +
            '<label for="category">Category</label>' +
            '<select class="form-control" id="category">' +
            categories.map(category => 
                `<option value="${category.categoryId}" ${category.categoryId === selectedCategoryId ? 'selected' : ''}>${category.categoryName}</option>`
                    ).join('') +
                '</select>' +
            '</div>';

            var ingredientsDropdown =`
                    <div class="container mt-5">
            <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Display Ingredients
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <ul class="list-group" id="ingredientsList">
          ${ingredients.sort((a, b) => a.ingredientName.localeCompare(b.ingredientName)).map(ingredient => `
            <li class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <input type="checkbox" class="form-check-input me-1 ingredient-checkbox" value="${ingredient.ingredientName}" data-id="${ingredient.ingredientId}">
                                    ${ingredient.ingredientName}
                                </div>
                                <input type="text" class="form-control mt-2 ingredient-amount" placeholder="Amount" disabled>
                            </li>
          `).join('')}
        </ul>
      </div>
    </div>
    
    <ul class="list-group mt-3" id="selectedIngredients">
      <!-- Selected items will be added here -->
    </ul>
  </div>`

        // Create the form fields dynamically using Bootstrap classes
        var formFields = '<form id="addProductForm">' +
            '<div class="form-row">' +
                '<div class="form-group col-md-6">' +
                    '<label for="productName">Product Name</label>' +
                    '<input type="text" class="form-control" id="productName" placeholder="Product Name">' +
                '</div>' +
                '<div class="form-group col-md-6">' +
                    '<label for="price">Price</label>' +
                    '<input type="text" class="form-control" id="price" placeholder="Price">' +
                '</div>' +
            '</div>' +
            '<div class="form-group">' +
                '<label for="description">Description</label>' +
                '<textarea class="form-control" id="description" rows="1" placeholder="Description" style="resize: vertical;"></textarea>' +
            '</div>' +
            // '<div class="form-group">' +
            //     '<label for="pictureUrl">Picture URL</label>' +
            //     '<input type="url" class="form-control" id="pictureUrl" placeholder="Picture URL">' +
            // '</div>' +
            `<div class="file-drop-area">
                <span class="choose-file-button">Choose file</span>
                <span class="file-message">or drag and drop files here</span>
                <input class="file-input" type="file" name="file">
            </div>`+
            categoriesDropdown+
            ingredientsDropdown +
            '<button type="submit" class="btn btn-primary">Submit</button>' +
        '</form>';

        // Append the form to the table
        // $("table").append('<tr><td colspan="4"><div class="form-container">' + formFields + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');
        $("table thead").after(`<tr class="edit-form-row"> <td colspan="9"> <div class="form-container"> ${formFields} <span class="close" onclick="closeForm()">&times;</span></div> </td> </tr>`);

        // Enable tooltips
        $('[data-toggle="tooltip"]').tooltip();

        // Add event listener to adjust textarea height dynamically
        $('#description').on('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

         // Function to get selected ingredients
        function getSelectedIngredients() {
            return $('#ingredientsList input:checked').map(function() {
                var listItem = $(this).closest('li');
                return {
                    name: $(this).val(),
                    amount: listItem.find('.ingredient-amount').val()
                };
            }).get();
        }
        $(document).on('change', '.ingredient-checkbox', function() {
        var amountInput = $(this).closest('li').find('.ingredient-amount');
        if (this.checked) {
            amountInput.prop('disabled', false);
        } else {
            amountInput.prop('disabled', true).val('');
        }
        });
        $(document).on('change', '.file-input', function() {
        

            var filesCount = $(this)[0].files.length;
            
            var textbox = $(this).prev();
            
            if (filesCount === 1) {
                var fileName = $(this).val().split('\\').pop();
                textbox.text(fileName);
            } else {
                textbox.text(filesCount + ' files selected');
            }
        });


        
        // Form submission handler
         $('#addProductForm').submit(function(event) {
            event.preventDefault(); // Prevent default form submission
            

            // Perform form validation
            console.log("check if is here ")
            if (this.checkValidity()) {
                // console.log("form is valid")
                // If form is valid, construct the data object
                
                var formData = new FormData();
                formData.append('productName', $('#productName').val());
                formData.append('price', $('#price').val());
                formData.append('description', $('#description').val());
                // formData.append('pictureUrl', $('#pictureUrl').val());
                formData.append('categoryId', $('#category').val());
                formData.append('file', $('.file-input')[0].files[0]);

                getSelectedIngredients().forEach((ingredient, index) => {
                    formData.append(`selectedIngredients[${index}][name]`, ingredient.name);
                    formData.append(`selectedIngredients[${index}][amount]`, ingredient.amount);
                });
                // Send the form data using Fetch API
                fetch('/createProduct', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    location.reload()
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            } else {
                // If form is invalid, display error messages or perform other actions
                console.log('Form validation failed');
            }
        });
    });

	
	// Edit row on edit button click
    $(document).on("click", ".edit", function() {
        $(this).attr("disabled", "disabled");
        
        var row = $(this).closest("tr");
        var productId = row.find("td:eq(0)").text();
        var productName = row.find("td:eq(1)").text();
        var price = row.find("td:eq(2)").text();
        var description = row.find("td:eq(3)").text();
        var pictureUrl = row.find("td:eq(4) a").attr('href');
        var categoryName = row.find("td:eq(5)").text();
        var ingredientsName = row.find("td:eq(7)").text();

        
        // Finding the category ID based on the category name
        var selectedCategory = categories.find(category => category.categoryName === categoryName);
        var selectedCategoryId = selectedCategory ? selectedCategory.categoryId : null;

        var selectedProduct = products.find(product => product.productName === productName);
        var selectedProductId = selectedProduct ? selectedProduct.productId : null;

        // Split the ingredients string into an array based on a delimiter (e.g., comma)
        var ingredientList = ingredientsName.split(' ');

        var ingredientIds = [];

        // Loop through each ingredient
        ingredientList.forEach(ingredientName => {
            // Find the product object that matches the ingredient name
            var selectedProduct = ingredients.find(ingredient => ingredient.ingredientName === ingredientName.trim());
            
            // If a matching product is found, extract its ID and add it to the ingredientIds array
            if (selectedProduct) {
                ingredientIds.push(selectedProduct.ingredientId);
            }
        });


        //console.log(ingredientIds);
        //console.log(selectedCategoryId)
        //console.log(selectedProductId)

        

        var categoriesDropdown = '<div class="form-group">' +
            '<label for="category">Category</label>' +
            '<select class="form-control" id="category">' +
            categories.map(category => 
                `<option value="${category.categoryId}" ${category.categoryId === selectedCategoryId ? 'selected' : ''}>${category.categoryName}</option>`
                    ).join('') +
                '</select>' +
            '</div>';

            var ingredientsDropdown =`
                    <div class="container mt-5">
            <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Display Ingredients
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <ul class="list-group" id="ingredientsList">
          ${ingredients.sort((a, b) => a.ingredientName.localeCompare(b.ingredientName)).map(ingredient => `
            <li class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <input type="checkbox" class="form-check-input me-1 ingredient-checkbox" value="${ingredient.ingredientName}" data-id="${ingredient.ingredientId}">
                                    ${ingredient.ingredientName}
                                </div>
                                <input type="text" class="form-control mt-2 ingredient-amount" placeholder="Amount" disabled>
                            </li>
          `).join('')}
        </ul>
      </div>
    </div>
    
    <ul class="list-group mt-3" id="selectedIngredients">
      <!-- Selected items will be added here -->
    </ul>
  </div>`

        // Create the form fields dynamically using Bootstrap classes with prefilled data
        var formFields = '<form id="editProductForm">' +
            '<div class="form-row">' +
                '<div class="form-group col-md-6">' +
                    '<label for="productName">Product Name</label>' +
                    '<input type="text" class="form-control" id="productName" placeholder="Product Name" value="' + productName + '">' +
                '</div>' +
                '<div class="form-group col-md-6">' +
                    '<label for="price">Price</label>' +
                    '<input type="text" class="form-control" id="price" placeholder="Price" value="' + price + '">' +
                '</div>' +
            '</div>' +
            '<div class="form-group">' +
                '<label for="description">Description</label>' +
                '<textarea class="form-control" id="description" rows="1" placeholder="Description" style="resize: vertical;">' + description + '</textarea>' +
            '</div>' +
            '<div class="form-group">' +
                '<label for="pictureUrl">Picture URL</label>' +
                '<input type="text" class="form-control" id="pictureUrl" placeholder="Picture URL" value="' + pictureUrl + '">' +
            '</div>' +
            categoriesDropdown +
            ingredientsDropdown+
            '<button type="submit" class="btn btn-primary">Submit</button>' +
        '</form>';

        // Append the form after the row
        row.after('<tr class="edit-form-row"><td colspan="4"><div class="form-container">' + formFields + '<span class="close" onclick="closeForm()">&times;</span></div></td></tr>');

        // Function to check checkboxes for selected ingredients based on their IDs
        function checkSelectedIngredients(ingredientIds) {
            console.log(productIngredients)
            ingredientIds.forEach(ingredientId => {
                // Find the corresponding product ingredient in productIngredients array
                var productIngredient = productIngredients.find(item => item.productId == selectedProductId && item.ingredientId == ingredientId);
                console.log('Product Ingredient:', productIngredient);
                
                // If the product ingredient is found, set the amount
                if (productIngredient) {
                    var inputField = $('#ingredientsList input[data-id="' + ingredientId + '"]').closest('li').find('.ingredient-amount');
                    console.log('Input Field:', inputField);

                    inputField.val(productIngredient.amount);
                    inputField.prop('disabled', false);
                }
                
                // Find the checkbox with the data-id attribute matching the ingredient ID
                var checkbox = $('#ingredientsList input[data-id="' + ingredientId + '"]');
                checkbox.prop('checked', true); // Check the checkbox
            });
        }
        checkSelectedIngredients(ingredientIds);

        // Enable tooltips
        $('[data-toggle="tooltip"]').tooltip();

        // Add event listener to adjust textarea height dynamically
        $('#description').on('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
         // Function to get selected ingredients
         function getSelectedIngredients() {
            return $('#ingredientsList input:checked').map(function() {
                var listItem = $(this).closest('li');
                return {
                    name: $(this).val(),
                    amount: listItem.find('.ingredient-amount').val()
                };
            }).get();
        }

        $(document).on('change', '.ingredient-checkbox', function() {
        var amountInput = $(this).closest('li').find('.ingredient-amount');
        if (this.checked) {
            amountInput.prop('disabled', false);
        } else {
            amountInput.prop('disabled', true).val('');
        }
    });
        

        // Form submission handler for edit form
        $('#editProductForm').submit(function(event) {
            event.preventDefault(); // Prevent default form submission

            // Perform form validation
            if (this.checkValidity()) {
                // If form is valid, construct the data object
                var formData = {
                    productId: selectedProductId,
                    productName: $('#productName').val(),
                    price: $('#price').val(),
                    description: $('#description').val(),
                    pictureUrl: $('#pictureUrl').val(),
                    categoryId: $('#category').val(),
                    selectedIngredients: getSelectedIngredients()
                };

                // Send the form data using Fetch API
                fetch('/updateProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.success) {
                        location.reload(); // Refresh the page on success
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            } else {
                // If form is invalid, display error messages or perform other actions
                console.log('Form validation failed');
            }
        });
    });



	// Delete row on delete button click
	$(document).on("click", ".delete", function(){
        var row = $(this).closest("tr");
        var productId = row.find("td:eq(0)").text();

            // Send DELETE request to server
            fetch(`/deleteProduct/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                if (data.success) {
                    location.reload(); // Refresh the page on success
                    $(".add-new").removeAttr("disabled");
                } else {
                    console.error('Failed to delete the product');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });
    });
</script>
</head>
<body>

    <style>
        .navbar-nav {
            margin: 0 auto;
            text-align: center;
        }
        .navbar-nav .nav-item {
            font-weight: bold;
        }
    </style>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Admin Panel</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" href="/admin">Product Management</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/commentAdmin">Comment Management</a>
                </li>

            </ul>
        </div>
    </nav>

<div class="container-lg">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-8"><h2>Product <b>Details</b></h2></div>
                    <div class="col-sm-4 d-flex align-items-center">
                        <button type="button" id="add-ingredient-btn" class="btn btn-info btn-sm" style="margin-left: 5px;">
                            <i class="fa fa-plus"></i> Add Ingredient
                        </button>
                        <button type="button" id="delete-ingredient-btn" class="btn btn-danger btn-sm" style="margin-left: 5px;">
                            <i class="fa fa-minus"></i> Delete Ingredient
                        </button>
                        <button type="button" class="btn btn-info btn-sm" id="add-product-btn" style="margin-left: 5px;">
                            <i class="fa fa-plus"></i> Add New Product
                        </button>
                    </div>
                </div>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Product Name</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Picture URL</th>
                        <th>Category </th>
                        <th>Amount</th>
                        <th>Ingredients</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (products && Array.isArray(products)) { %>
                        <% products.forEach((product, index) => { %>
                            <% if (product && !isNaN(product.price)) { %>
                                <tr>
                                    <td><%= product.productId %></td>
                                    <td><%= product.productName %></td>
                                    <td><%= product.price %></td>
                                    <td><%= product.description %></td>
                                    <td><a href="<%= product.pictureUrl %>">LINK</a></td>
                                    <td><%= product.category ? product.category.categoryName : 'No Category' %></td>
                                    <td>
                                        <% if (product.ingredients && Array.isArray(product.ingredients)) { %>
                                            <% product.ingredients.forEach(ingredient => { %>
                                                <% 
                                                    // Find the productIngredient entry that matches the current product and ingredient
                                                    const productIngredient = productIngredients.find(pi => pi.productId === product.productId && pi.ingredientId === ingredient.ingredientId); 
                                                    const amount = productIngredient ? productIngredient.amount : '0 kg'; 
                                                %>
                                                <span><%= ingredient.ingredientName %>: <%= amount %></span><br>
                                            <% }); %>
                                        <% } %>
                                    </td>
                                    
                                    <td>
                                        <% if (product.ingredients && Array.isArray(product.ingredients)) { %>
                                            <% product.ingredients.forEach(ingredient => { %>
                                                <span><%= ingredient.ingredientName %></span><br>
                                            <% }); %>
                                        <% } %>
                                    <td>
                                        <a class="add" title="Add" data-toggle="tooltip"><i class="material-icons">&#xE03B;</i></a>
                                        <a class="edit" title="Edit" data-toggle="tooltip"><i class="material-icons">&#xE254;</i></a>
                                        <a class="delete" title="Delete" data-toggle="tooltip"><i class="material-icons">&#xE872;</i></a>
                                    </td>
                                </tr>
                            <% } %>
                        <% }); %>
                    <% } %>
                    </tbody>
            </table>
        </div>
    </div>
</div>     
</body>
</html>